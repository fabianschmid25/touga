generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(uuid())
  email        String     @unique
  passwordHash String
  name         String?
  avatarUrl    String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?  // Soft Delete f√ºr User

  articles     Article[]
  comments     Comment[]
  likes        Like[]
  following    Follow[]   @relation("followsBySource")
  followers    Follow[]   @relation("followsByTarget")
}

model Article {
  id           String       @id @default(uuid())
  title        String
  subtitle     String?
  content      String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  deletedAt    DateTime?    // Soft Delete
  viewCount    Int          @default(0)

  author       User         @relation(fields: [authorId], references: [id])
  authorId     String

  images       Image[]
  comments     Comment[]
  likes        Like[]
  categories   Category[]   @relation("ArticleCategories")

  @@index([createdAt])
}

model Image {
  id           String     @id @default(uuid())
  url          String
  caption      String?
  order        Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?  // Soft Delete

  article      Article    @relation(fields: [articleId], references: [id])
  articleId    String

  @@index([articleId, order])
}

model Comment {
  id           String      @id @default(uuid())
  content      String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  deletedAt    DateTime?   // Soft Delete

  author       User        @relation(fields: [authorId], references: [id])
  authorId     String

  article      Article     @relation(fields: [articleId], references: [id])
  articleId    String

  parent       Comment?    @relation("CommentReplies", fields: [parentId], references: [id])
  parentId     String?
  replies      Comment[]   @relation("CommentReplies")

  @@index([articleId, createdAt])
}

model Like {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())

  user         User       @relation(fields: [userId], references: [id])
  userId       String

  article      Article    @relation(fields: [articleId], references: [id])
  articleId    String

  @@unique([userId, articleId])
  @@index([articleId])
}

model Follow {
  follower     User       @relation("followsBySource", fields: [followerId], references: [id])
  followerId   String

  following    User       @relation("followsByTarget", fields: [followingId], references: [id])
  followingId  String

  createdAt    DateTime   @default(now())

  @@id([followerId, followingId])
  @@index([followingId])
}

model Category {
  id           String     @id @default(uuid())
  name         String     @unique
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?  // Soft Delete

  articles     Article[]  @relation("ArticleCategories")

  @@index([name])
}
